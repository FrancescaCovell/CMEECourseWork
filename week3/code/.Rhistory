TempPlot <- ggplot(data = subset(LetsGO, !isn.na(Bestmodel)))
LetsGO <- data.frame(Subset = 1:max(DF$ID),
Temp = 0,
Bestmodel = Best_model$BestModelAIC)
for (i in 1:max(DF$ID)) {
d <- DF[ which(DF$ID == i),]
LetsGO[i,"Temp"] <- d$Temp[1]
}
TempPlot <- ggplot(data = subset(LetsGO, !isn.na(Bestmodel))) +
aes(x = BestModel, fill = Temp)+
geom_bar()
TempPlot <- ggplot(data = subset(LetsGO, !is.na(Bestmodel))) +
aes(x = BestModel, fill = Temp)+
geom_bar()
TempPlot
TempPlot <- ggplot(data = subset(LetsGO, !is.na(Bestmodel))) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()
TempPlot
TempPlot <- ggplot(data = subset(LetsGO, !is.na(Bestmodel))) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
?scale_fill_viridis
install.packages("viridis")
require(viridis)
TempPlot <- ggplot(data = subset(LetsGO, !is.na(Bestmodel))) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
TempPlot <- ggplot(data = subset(LetsGO, (Bestmodel))) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot <- ggplot(data = subset(LetsGO, !is.na(Bestmodel))) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
LetsGO
Temp
subset(LetsGO, !is.na(Bestmodel))
TempPlot <- ggplot(data = LetsGO) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
LetsGO <- data.frame(Subset = 1:max(DF$ID),
Temp = 0,
Bestmodel = Best_model$BestModelAIC,
stringsAsFactors = F)
for (i in 1:max(DF$ID)) {
d <- DF[ which(DF$ID == i),]
LetsGO[i,"Temp"] <- d$Temp[1]
}
TempPlot <- ggplot(data = LetsGO) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
LetsGO
LetsGO["Temp"]
TempPlot <- ggplot(data = LetsGO) +
aes(x = "Bestmodel", fill = "Temp")+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
TempPlot <- ggplot(data = LetsGO) +
aes(x = LetsGO$Bestmodel, fill = LetsGO$Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
View(LetsGO)
dev.o
dev.off
dev.off()
require(viridis)
LetsGO <- data.frame(Subset = 1:max(DF$ID),
Temp = 0,
Bestmodel = Best_model$BestModelAIC,
stringsAsFactors = F)
for (i in 1:max(DF$ID)) {
d <- DF[ which(DF$ID == i),]
LetsGO[i,"Temp"] <- d$Temp[1]
}
LetsGO["Temp"]
TempPlot <- ggplot(data = LetsGO) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
# clear any existing graphs and plot your graph within the R window
fern2 <- function(start_position, direction, length, dir)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
fern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
fern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
fern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
library(tictoc)
tic()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
par(2,2)
par(c(2,2))
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
Standardfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Standardfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Standardfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Standardfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
Shortfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.05) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Shortfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Shortfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Sorttfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tic()
Shorfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
Shortfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.05) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Shortfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Shortfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Shortfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
Longfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Longfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Longfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Longfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
Challenge_F()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
graphics.off()# clear any existing graphs and plot your graph within the R window
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
Challengeturtle <- function(start_position, direction, length)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
Col <-
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
Col <- Colour
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
Col <- Colour
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Standard fern line size threshold 0.01")
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Short fern line size threshold 0.05")
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
rm(list=ls()) # nothing written elsewhere should be needed to make this work
# don't worry about comments for this challenge - the number of characters used will be counted starting from here
G<-function(x,y,z,d){if(z>0.01){n<-turtle(c(x[1],x[2]),y,z)|d<-d*-1|G(c(n[1],n[2]),y,(z*0.87),d)|if(d==-1){G(c(n[1],n[2]),y+(pi/4),(z*0.38),d*-1)}else{G(c(n[1],n[2]),y-(pi/4),(z*0.38),d)}}}
G
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/week3/code/TreeHeight.R")
setwd("CMEECourseWork/week3/code/")
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return(height)
}
TreeHeight(37, 40)
test <- read.csv("../result/trees.csv")
test <- read.csv("../data/trees.csv")
test
getdw
getwd()
test <- read.csv("../result/trees.csv")
test <- read.csv("../data/trees.csv")
test
length(test[1])
test[1]
max(test[1])
test[1][1]
test[1,]
test[,1]
test[1]
test[1,1]
length(test)
length(test[1])
max(test[1])
tail(test[1])
test
test[2]
length(test[2])
as.list(test[2])
length(as.list(test[2]))
max(as.list(test[2]))
type(test[1])
class(test[1])
test$Species
length(test$Species)
test$Distance.m
test$Distance.m[1]
for (i in 1:length(test$Species)) {
TreeHeight(test$Angle.degrees[i], test$Distance.m[i])
}
TreeHts<- data.frame(Species =  test$Species,
Distance.m,
Angle.degrees,
Tree.hight.m)
TreeHts<- data.frame(Species =  test$Species,
Distance.m =,
Angle.degrees= ,
Tree.hight.m= )
for (i in 1:length(test$Species)) {
Height<-TreeHeight(test$Angle.degrees[i], test$Distance.m[i])
}
Height
for (i in 1:length(test$Species)) {
Height[i]<-TreeHeight(test$Angle.degrees[i], test$Distance.m[i])
}
Height
TreeHts<- data.frame(Species =  test$Species,
Distance.m = test$Distance.m,
Angle.degrees = test$Angle.degrees,
Tree.hight.m = Height )
TreeHts
#Function to calculate Hight based on angle and distance
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return(height)
}
#test function
TreeHeight(37, 40)
#import csv file
tree <- read.csv("../data/trees.csv")
tree
#run function on csv
Height <-vector()
for (i in 1:length(tree$Species)) {
Height[i]<-TreeHeight(tree$Angle.degrees[i], tree$Distance.m[i])
}
#create data frame of results
TreeHts<- data.frame(Species =  tree$Species,
Distance.m = tree$Distance.m,
Angle.degrees = tree$Angle.degrees,
Tree.hight.m = Height )
source("TreeHeight.R")
