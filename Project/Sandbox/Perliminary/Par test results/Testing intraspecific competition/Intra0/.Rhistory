y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Standardfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Standardfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Standardfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
Shortfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.05) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Shortfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Shortfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Sorttfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tic()
Shorfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
Shortfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.05) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Shortfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Shortfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Shortfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
Longfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Longfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Longfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Longfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
Challenge_F()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
graphics.off()# clear any existing graphs and plot your graph within the R window
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
Challengeturtle <- function(start_position, direction, length)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
Col <-
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
Col <- Colour
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
Col <- Colour
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Standard fern line size threshold 0.01")
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Short fern line size threshold 0.05")
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
rm(list=ls()) # nothing written elsewhere should be needed to make this work
# don't worry about comments for this challenge - the number of characters used will be counted starting from here
G<-function(x,y,z,d){if(z>0.01){n<-turtle(c(x[1],x[2]),y,z)|d<-d*-1|G(c(n[1],n[2]),y,(z*0.87),d)|if(d==-1){G(c(n[1],n[2]),y+(pi/4),(z*0.38),d*-1)}else{G(c(n[1],n[2]),y-(pi/4),(z*0.38),d)}}}
G
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/week3/code/PP_Regress.R", echo=TRUE)
BUILDMAT <- function(nrow, ncol){
mat <- do.call("cbind", lapply(1:ncol, function(x) sample(c(1, rep(0, nrow-1)), nrow, prob =1 )))
return(mat)
}
test1 <- BUILDMAT(11,11)
version
source("~/CMEECourseWork/week3/code/apply1.R", echo=TRUE)
source("~/CMEECourseWork/week3/code/apply2.R", echo=TRUE)
View(M)
source("~/CMEECourseWork/week3/code/boilerplate.R", echo=TRUE)
source("~/CMEECourseWork/week3/code/browse.R", echo=TRUE)
Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
doit <- function(x){
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345)
popn<- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn),F))
class(result)
result
result <- vector("list", 15)
for (i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
source("~/CMEECourseWork/week3/code/Gikro.R", echo=TRUE)
library(tidyverse)
library(readr)
library(gtools)
library(viridis)
library(parallel)
library(ggplot2)
library(gridExtra)
#gpath = "/home/frcovell/Project/Results/TNM_Output"
gpath = "/home/frcovell/Project/sandbox/Testing intraspecific competition/Intra0"
setwd(gpath)
# function
## Function to read in any TNM output from any seed, giving the path and the data you want as input
read_Output = function(res_Path, res) {
if(res == "/totalPop.txt") {
cols = c("g", "n")
} else if(res == "/totalPopSpec.txt") {
cols = c("g", "s", "n")
} else if(res == "/cellPop.txt") {
cols = c("g", "c", "n")
} else if(res == "/cellPopSpec.txt") {
cols = c("g", "c", "s", "n")
} else if(res == "/cellRich.txt") {
cols = c("g", "c", "n")
}
if(res == "/cellPopSpec.txt") {
f <- function(x, pos) subset(x, g == 9976)
data = read_delim_chunked(file = paste0(res_Path, res), delim = " ", col_names = cols, chunk_size = 10000, callback = DataFrameCallback$new(f),
progress = FALSE)
} else {
data = read.table(file = paste0(res_Path, res), col.names = cols)
}
seed = str_split(res_Path, pattern = "/")[[1]][8] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch = str_split(res_Path, pattern = "/")[[1]][11] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)%>% str_split(., pattern = ".t") %>% simplify() %>% nth(1)
data = data %>% add_column(seed = seed, run = run, patch = patch)
return(data)
}
SE = function(x) {
sample_Size = length(x)
SD = sd(x)
SE = SD/sqrt(sample_Size)
return(SE)
}
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
AmatotalPops = mcmapply(read_Output, amalgamation_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
AmatotalPopSpecs = mcmapply(read_Output, amalgamation_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
AmacellPops = mcmapply(read_Output, amalgamation_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
AmacellRich = mcmapply(read_Output, amalgamation_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
AmacellPopSpec = mcmapply(read_Output, amalgamation_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
AmatotalPops_SE = AmatotalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
Amarichness_SE = AmatotalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
random_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RandomLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
RandtotalPops = mcmapply(read_Output, random_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RandtotalPopSpecs = mcmapply(read_Output, random_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RandcellPops = mcmapply(read_Output, random_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RandcellRich = mcmapply(read_Output, random_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RandcellPopSpec = mcmapply(read_Output, random_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
RandtotalPops_SE = RandtotalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
Randrichness_SE = RandtotalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RasterLandscape") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
RasttotalPops = mcmapply(read_Output, raster_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RasttotalPopSpecs = mcmapply(read_Output, raster_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RastcellPops = mcmapply(read_Output, raster_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RastcellRich = mcmapply(read_Output, raster_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
RastcellPopSpec = mcmapply(read_Output, raster_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
RasttotalPops_SE = RasttotalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
Rastrichness_SE = RasttotalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
#effect of pecentage cover
#total pop
AmaTtlPopData <- as.data.frame(AmatotalPops_SE)
AmaAno<- summary(aov(mean_n ~ patch, AmaTtlPopData))
AmaLm<-summary(lm(mean_n ~ patch, AmaTtlPopData))
AmaLm
RandTtlPopData <- as.data.frame(RandtotalPops_SE)
RandAno<- summary(aov(mean_n ~ patch, RandTtlPopData))
RandLm<-summary(lm(mean_n ~ patch, RandTtlPopData))
RastTtlPopData <- as.data.frame(RasttotalPops_SE)
RastAno<- summary(aov(mean_n ~ patch, RastTtlPopData))
RastLm<-summary(lm(mean_n ~ patch, RastTtlPopData))
TtlPopAma <- ggplot(AmaTtlPopData, aes(x=patch, y=mean_n)) +
labs(title="Amalgamation Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
TtlPopRand <- ggplot(RandTtlPopData, aes(x=patch, y=mean_n)) +
labs(title="Randomly Generate Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
TtlPopRast <- ggplot(RastTtlPopData, aes(x=patch, y=mean_n)) +
labs(title="Raster Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
grid.arrange(TtlPopAma,TtlPopRand,TtlPopRast, nrow=1,  top = "Plot of Mean Total per Percentage Cover")
#Species Richness
AmaSppRchData <- as.data.frame(Amarichness_SE)
AmaAno<- summary(aov(mean_Rich ~ patch, AmaSppRchData))
AmaLm<-summary(lm(mean_Rich ~ patch, AmaSppRchData))
RandSppRchData <- as.data.frame(Randrichness_SE)
RandAno<- summary(aov(mean_Rich ~ patch, RandSppRchData))
RandLm<-summary(lm(mean_Rich ~ patch, RandSppRchData))
RastSppRchData <- as.data.frame(Rastrichness_SE)
RastAno<- summary(aov(mean_Rich ~ patch, RastSppRchData))
RastLm<-summary(lm(mean_Rich ~ patch, RastSppRchData))
SppRchAma <- ggplot(AmaSppRchData, aes(x=patch, y=mean_Rich)) +
labs(title="Amalgamation Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
SppRchRand <- ggplot(RandSppRchData, aes(x=patch, y=mean_Rich)) +
labs(title="Random Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
SppRchRast <- ggplot(RastSppRchData, aes(x=patch, y=mean_Rich)) +
labs(title="Raster Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
grid.arrange(SppRchAma,SppRchRand,SppRchRast, ncol=3,  top = "Plot of Species Richness per Percentage Cover")
FullTtlpopData <- data.frame(LandGen = c(rep("Amalgamation", length(AmatotalPops_SE$patch)), rep("Random", length(RandtotalPops_SE$patch)), rep("Raster", length(RasttotalPops_SE$patch))),
Patch = c(AmatotalPops_SE$patch, RandtotalPops_SE$patch, RasttotalPops_SE$patch),
Mean_n = c(AmatotalPops_SE$mean_n,RandtotalPops_SE$mean_n, RasttotalPops_SE$mean_n))
FullRichData <- data.frame(LandGen = c(rep("Amalgamation", length(Amarichness_SE$patch)), rep("Random", length(Randrichness_SE$patch)), rep("Raster", length(Rastrichness_SE$patch))),
Patch = c(Amarichness_SE$patch, Randrichness_SE$patch, Rastrichness_SE$patch),
Mean_Rich = c(Amarichness_SE$mean_Rich,Randrichness_SE$mean_Rich, Rastrichness_SE$mean_Rich))
#total pop
#percentage cover
PatLm <- summary(lm(Mean_n ~ Patch, FullTtlpopData))
#effect of landscape generation
LanLm <- summary(lm(Mean_n ~ LandGen, FullTtlpopData))
FullLm<-summary(lm(Mean_n ~ Patch+LandGen, FullTtlpopData))
#species richness
#percentage cover
PatLm <- summary(lm(Mean_Rich ~ Patch, FullRichData))
#effect of landscape generation
LanLm <- summary(lm(Mean_Rich~ LandGen, FullRichData))
FullLm<-summary(lm(Mean_Rich ~ Patch+LandGen, FullRichData))
ggplot(FullTtlpopData, aes(x=Patch, y=Mean_n)) +
labs(title="Plot of Mean Total per Percentage Cover",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
ggplot(FullRichData, aes(x=Patch, y=Mean_Rich)) +
labs(title="Plot of Species Richness per Percentage Cover",x="Percentage Cover", y = "Species Richness")+
geom_boxplot(outlier.shape=NA)
PatLm
#total pop
#percentage cover
PatLm <- summary(lm(Mean_n ~ Patch, FullTtlpopData))
PatLm
#species richness
#percentage cover
PatLm <- summary(lm(Mean_Rich ~ Patch, FullRichData))
PatLm
ggplot(FullTtlpopData, aes(x=Patch, y=Mean_n)) +
labs(title="Plot of Mean Total per Percentage Cover",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA,gpar(fontface = 3, fontsize = 9))
ggplot(FullTtlpopData, aes(x=Patch, y=Mean_n)) +
labs(title="Plot of Mean Total per Percentage Cover",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA,grobs = gl,
widths = c(2, 1, 1))
grid.arrange(SppRchAma,SppRchRand,SppRchRast, grobs = gl,
widths = c(2, 1, 1), ncol=3,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(2, 1, 1), ncol=3,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), ncol=3,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(TtlPopAma,TtlPopRand,TtlPopRast,widths = c(1, 1, 1), nrow=1,  top = "Plot of Mean Total per Percentage Cover")
grid.arrange(TtlPopAma,TtlPopRand,TtlPopRast,widths = c(1, 1, 1), ncol=3,  top = "Plot of Mean Total per Percentage Cover")
SppRchAma <- ggplot(AmaSppRchData, aes(x=patch, y=mean_Rich)) +
labs(title="Amalgamation Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
SppRchRand <- ggplot(RandSppRchData, aes(x=patch, y=mean_Rich)) +
labs(title="Random Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
SppRchRast <- ggplot(RastSppRchData, aes(x=patch, y=mean_Rich)) +
labs(title="Raster Generated Landscape",x="Percentage Cover", y = "Mean Total population")+
geom_boxplot(outlier.shape=NA)
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), ncol=3,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), nrow=2,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), nrow=3,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), nrow=3, ncol=1,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), nrow=2, ncol=2,  top = "Plot of Species Richness per Percentage Cover")
source("~/Project/sandbox/FullData amalysis.R", echo=TRUE)
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1), ncol=2,  top = "Plot of Species Richness per Percentage Cover")
grid.arrange(SppRchAma,SppRchRand,SppRchRast, widths = c(1, 1, 1),   top = "Plot of Species Richness per Percentage Cover")
FullRichData <- data.frame(LandGen = c(rep("Amalgamation", length(Amarichness_SE$patch)), rep("Random", length(Randrichness_SE$patch)), rep("Raster", length(Rastrichness_SE$patch))),
Patch = c(Amarichness_SE$patch, Randrichness_SE$patch, Rastrichness_SE$patch),
Mean_Rich = c(Amarichness_SE$mean_Rich,Randrichness_SE$mean_Rich, Rastrichness_SE$mean_Rich))
#species richness
#percentage cover
PatSppRchLm <- summary(lm(Mean_Rich ~ Patch, FullRichData))
#effect of landscape generation
LanSppRchLm <- summary(lm(Mean_Rich~ LandGen, FullRichData))
PatSppRchLm
FullRichData
source("~/Project/sandbox/FullData amalysis.R", echo=TRUE)
PatTtlPopLm
#species richness
#percentage cover
PatSppRchLm <- summary(lm(Mean_Rich ~ Patch, FullRichData))
PatSppRchLm
AmatotalPops
Amarichness_SE
Randrichness_SE
RandtotalPops_SE
Rastrichness_SE
RasttotalPops_SE
AmaLm
FullTtlpopData <- data.frame(LandGen = c(rep("Amalgamation", length(AmatotalPops_SE$patch)), rep("Random", length(RandtotalPops_SE$patch)), rep("Raster", length(RasttotalPops_SE$patch))),
Patch = c(AmatotalPops_SE$patch, RandtotalPops_SE$patch, RasttotalPops_SE$patch),
Mean_n = c(AmatotalPops_SE$mean_n,RandtotalPops_SE$mean_n, RasttotalPops_SE$mean_n))
FullTtlpopData
#total pop
#percentage cover
PatTtlPopLm <- summary(lm(Mean_n ~ Patch, FullTtlpopData))
PatTtlPopLm
#effect of landscape generation
LanTtlPopLm <- summary(lm(Mean_n ~ LandGen, FullTtlpopData))
LanTtlPopLm
#species richness
#percentage cover
PatSppRchLm <- summary(lm(Mean_Rich ~ Patch, FullRichData))
#effect of landscape generation
LanSppRchLm <- summary(lm(Mean_Rich~ LandGen, FullRichData))
PatSppRchLm
LanSppRchLm
