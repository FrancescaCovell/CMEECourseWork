Bestmodel = Best_model$BestModelAIC,
stringsAsFactors = F)
for (i in 1:max(DF$ID)) {
d <- DF[ which(DF$ID == i),]
LetsGO[i,"Temp"] <- d$Temp[1]
}
LetsGO["Temp"]
TempPlot <- ggplot(data = LetsGO) +
aes(x = Bestmodel, fill = Temp)+
geom_bar()+
scale_fill_viridis(discrete = T)+
theme_minimal()+
theme(legend.position = 'bottom')+
xlab('Model')+
ylab('Count')
TempPlot
# clear any existing graphs and plot your graph within the R window
fern2 <- function(start_position, direction, length, dir)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
fern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
fern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
fern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
library(tictoc)
tic()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
fern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
par(2,2)
par(c(2,2))
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
Standardfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Standardfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Standardfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Standardfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
Shortfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.05) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Shortfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Shortfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Sorttfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tic()
Shorfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
Shortfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.05) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Shortfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Shortfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Shortfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
Longfern2 <- function(start_position, direction, length, dir)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
new_start <- turtle(c(x[1], x[2]), y , z)
dir <- dir * -1 # force switch between 1 and -1
Longfern2(c(new_start[1], new_start[2]), y ,  (z*0.87), dir)
if (dir == -1) {# if dir = -1 direction goes left
Longfern2(c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1)
}else if (dir == 1) {# if dir = 1 direction goes right
Longfern2(c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir)
}
}
}
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tic()
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15))
tic()
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
Challenge_F()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
graphics.off()# clear any existing graphs and plot your graph within the R window
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
Challenge_F()
Challengeturtle <- function(start_position, direction, length)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
Col <-
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.005) {
x <- start_position
y <- direction
z <-  length
Col <- Colour
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
Challengeturtle <- function(start_position, direction, length, Colour)  {
end_position<- c((cos(direction)*length) + start_position[1], (sin(direction)*length)+start_position[2]) #work out end position based on length and directio
segments(start_position[1],start_position[2],end_position[1], end_position[2],
col = Colour)#draw a line between start and wnd position
return(end_position) # you should return your endpoint here.
}
Xmassfern2 <- function(start_position, direction, length, dir, Colour)  {
if (length > 0.01) {
x <- start_position
y <- direction
z <-  length
Col <- Colour
new_start <- Challengeturtle(c(x[1], x[2]), y , z, Col)
dir <- dir * -1 # force switch between 1 and -1
Xmassfern2 (c(new_start[1], new_start[2]), y ,  (z*0.87), dir, Colour=c("brown"))
if (dir == -1) {# if dir = -1 direction goes left
Xmassfern2 (c(new_start[1], new_start[2]), y + (pi/4),  (z*0.38), dir * -1, Colour=c("dark green"))
}else if (dir == 1) {# if dir = 1 direction goes right
Xmassfern2 (c(new_start[1], new_start[2]), y - (pi/4),  (z*0.38), dir, Colour = c("red"))
}
}
}
graphics.off()# clear any existing graphs and plot your graph within the R window
par(mfrow=c(2,2))
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Standard fern line size threshold 0.01")
Standardfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)# dir starts= 1 to force direction to go left first
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Short fern line size threshold 0.05")
Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
rm(list=ls()) # nothing written elsewhere should be needed to make this work
# don't worry about comments for this challenge - the number of characters used will be counted starting from here
G<-function(x,y,z,d){if(z>0.01){n<-turtle(c(x[1],x[2]),y,z)|d<-d*-1|G(c(n[1],n[2]),y,(z*0.87),d)|if(d==-1){G(c(n[1],n[2]),y+(pi/4),(z*0.38),d*-1)}else{G(c(n[1],n[2]),y-(pi/4),(z*0.38),d)}}}
G
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/week3/code/PP_Regress.R", echo=TRUE)
BUILDMAT <- function(nrow, ncol){
mat <- do.call("cbind", lapply(1:ncol, function(x) sample(c(1, rep(0, nrow-1)), nrow, prob =1 )))
return(mat)
}
test1 <- BUILDMAT(11,11)
version
source("~/CMEECourseWork/week3/code/apply1.R", echo=TRUE)
source("~/CMEECourseWork/week3/code/apply2.R", echo=TRUE)
View(M)
source("~/CMEECourseWork/week3/code/boilerplate.R", echo=TRUE)
source("~/CMEECourseWork/week3/code/browse.R", echo=TRUE)
Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
doit <- function(x){
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345)
popn<- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn),F))
class(result)
result
result <- vector("list", 15)
for (i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
source("~/CMEECourseWork/week3/code/Gikro.R", echo=TRUE)
Land<-read.table(file.choose())
Land
class(land)
class(Land)
LandRast <- raster(as.matrix(Land))
library(raster)
LandRast <- raster(as.matrix(Land))
LandRast
plot(LandRast)#, col=hcl.colors(20))
library('plot.matrix')
library(plot.matrix)
install.packages("plot.matrix")
library(plot.matrix)
plot(Land)
class(x)
x
x <- matrix(runif(35), ncol=5) # create a numeric matrix object
x
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(x)
m <- matrix(runif(35)<0.5, ncol=7)
m
plot(m)
runif(35)<0.5
runif(35)<0.5
m <- matrix(Land<1, ncol=11)
m
plot(m)
plot(m, col=c('white','green'))
plot(m, col=c('green','white'))
plot(Land, col=c('green','white'),breaks=c(0, 0.5, 1))
m
m <- matrix(Land<1, ncol=11)
plot(m, col=c('green','white'),breaks=c(0, 0.5, 1))
m
m <- matrix(Land<1, ncol=11)
plot(m, col=c('green','white'),breaks=c(0, 0.5, 1))
plot(m, col=c('green','white'))
plot(m, col=c('green','white'), key=NULL)
Land
x <- matrix(runif(35), ncol=5)
x
x <- as.matrix(Land)
x
plot(x, col=c('green','white'), key=NULL)
plot(x, col=c('green','white'))
plot(LandScape, col=c('white', 'green'))
Land<-read.table(file.choose())
LandScape <- as.matrix(Land)
plot(LandScape, col=c('white', 'green'))
plot(LandScape, col=c('white', 'green'), main=X)
plot(LandScape, col=c('white', 'green'), main="X")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
xlim=c(0,11))
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
ylab="",yaxt="n",
xlab="",xaxt="n")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
yaxt="n",
xlab="", xaxt="n")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
axes = false)
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
axes = F)
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
xaxt='n', ann=FALSE)
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
axes=FALSE, frame.plot=TRUE)
Axis(side=1, labels=FALSE)
Axis(side=2, labels=FALSE)
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
axes=FALSE, frame.plot=TRUE)
Axis(side=1, labels=FALSE)
Axis(side=2, labels=FALSE)
longData<-melt(LandScape)
library(reshape2)
library(ggplot2)
longData<-melt(LandScape)
longData
A <- matrix(c(2,5,2,1,0,0,0,0,1,0,0,0,0,1,3,5,6,0,0,1,0,0,0,2,0,0,1,2,7,2,4,6,2,5,1,0,0,1,0,0,0,1,0,0,3,5,4,0,0,1,0,0,1,0,0,2,0,3,5,7,3,1,4,0,1,0,0,0,0,2,0,0,0,1,3,4,6,0,0,1), byrow=T, nrow=8, ncol=10)
colnames(A) <- letters[1:10]
rownames(A) <- LETTERS[1:8]
print(A)
longData<-melt(A)
longData
longData<-melt(LandScape)
ggplot(longData, aes(x = Var2, y = Var1))
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red")
ggplot(longData, aes(x = Var2, y = Var1))+
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover")
LandScape
colnames(LandScape)<-c(1:11)
LandScape
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover")
plot(LandScape, col=c('white', 'green'),
main="1% Forest Cover",
ylab="",
xlab="")
Land<-read.table("/home/frcovell/Project/Data/Fragments/AmalgamationLandscape1_0.1.txt")
LandScape <- as.matrix(Land)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
pdf(file = "/home/frcovell/Project/sandbox/MyPlot.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) #
Land<-read.table("/home/frcovell/Project/Data/Fragments/AmalgamationLandscape1_0.1.txt")
LandScape <- as.matrix(Land)
colnames(LandScape)<-c(1:11)
plot(LandScape, col=c('white', 'green'),
main="10% Forest Cover",
ylab="",
xlab="")
dev.off()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Project/sandbox/FullData amalysis.R", echo=TRUE)
AmatotalPops_SE
res_Path = amalgamation_Paths
res_Path
seed = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
seed
seed = str_split(res_Path, pattern = "/")[[1]][8] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
seed
source("~/Project/sandbox/FullData amalysis.R", echo=TRUE)
PatTtlPopLm
LanTtlPopLm
PatSppRchLm
LanSppRchLm
AmaLm
AmaLm
AmaLm
RandLm
RastLm
