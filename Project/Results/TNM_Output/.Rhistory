Shortfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Longfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1)
tempplot <-plot(1, type = "n",                         # Remove all elements of plot
xlab = "", ylab = "",
xlim = c(-15, 15), ylim = c(-15, 15),
main ="Long fern line size threshold 0.005")
Xmassfern2(start_position = c(0, -15), direction =pi/2, length = 4, dir = 1, Colour = "brown")
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
tic()
Challenge_F()
toc()
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_main.R", echo=TRUE)
rm(list=ls()) # nothing written elsewhere should be needed to make this work
# don't worry about comments for this challenge - the number of characters used will be counted starting from here
G<-function(x,y,z,d){if(z>0.01){n<-turtle(c(x[1],x[2]),y,z)|d<-d*-1|G(c(n[1],n[2]),y,(z*0.87),d)|if(d==-1){G(c(n[1],n[2]),y+(pi/4),(z*0.38),d*-1)}else{G(c(n[1],n[2]),y-(pi/4),(z*0.38),d)}}}
G
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/HPC/fc420/fc420_HPC_2021_challengeG.R", echo=TRUE)
G(c(0, -15),pi/2,4,1)
source("~/CMEECourseWork/week3/code/PP_Regress.R", echo=TRUE)
BUILDMAT <- function(nrow, ncol){
mat <- do.call("cbind", lapply(1:ncol, function(x) sample(c(1, rep(0, nrow-1)), nrow, prob =1 )))
return(mat)
}
test1 <- BUILDMAT(11,11)
version
source("~/CMEECourseWork/week3/code/apply1.R", echo=TRUE)
source("~/CMEECourseWork/week3/code/apply2.R", echo=TRUE)
View(M)
source("~/CMEECourseWork/week3/code/boilerplate.R", echo=TRUE)
source("~/CMEECourseWork/week3/code/browse.R", echo=TRUE)
Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
doit <- function(x){
temp_x <- sample(x, replace = TRUE)
if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(temp_x))))
}
else {
stop("Couldn't calculate mean: too few unique values!")
}
}
set.seed(1345)
popn<- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn),F))
class(result)
result
result <- vector("list", 15)
for (i in 1:15) {
result[[i]] <- try(doit(popn), FALSE)
}
source("~/CMEECourseWork/week3/code/Gikro.R", echo=TRUE)
install.packages("LevGen")
install.packages("Zabados")
library(tidyverse)
library(readr)
library(gtools)
library(viridis)
library(parallel)
gpath = "/home/frcovell/Project/Results/TNM_Output"
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths <- list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths =append(list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
?append
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths =append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
amalgamation_Paths
library(tidyverse)
library(readr)
library(gtools)
library(viridis)
library(parallel)
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths = append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_" && "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_" & "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths = append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
amalgamation_Paths
## Function to read in any TNM output from any seed, giving the path and the data you want as input
read_Output = function(res_Path, res) {
if(res == "/totalPop.txt") {
cols = c("g", "n")
} else if(res == "/totalPopSpec.txt") {
cols = c("g", "s", "n")
} else if(res == "/cellPop.txt") {
cols = c("g", "c", "n")
} else if(res == "/cellPopSpec.txt") {
cols = c("g", "c", "s", "n")
} else if(res == "/cellRich.txt") {
cols = c("g", "c", "n")
}
if(res == "/cellPopSpec.txt") {
f <- function(x, pos) subset(x, g == 9976)
data = read_delim_chunked(file = paste0(res_Path, res), delim = " ", col_names = cols, chunk_size = 10000, callback = DataFrameCallback$new(f),
progress = FALSE)
} else {
data = read.table(file = paste0(res_Path, res), col.names = cols)
}
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
data = data %>% add_column(seed = seed, run = run, patch = patch)
return(data)
}
totalPops = mcmapply(read_Output, amalgamation_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
totalPopSpecs = mcmapply(read_Output, amalgamation_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPops = mcmapply(read_Output, amalgamation_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellRich = mcmapply(read_Output, amalgamation_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPopSpec = mcmapply(read_Output, amalgamation_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
## Function to calculate standard error
SE = function(x) {
sample_Size = length(x)
SD = sd(x)
SE = SD/sqrt(sample_Size)
return(SE)
}
totalPops
totalPops_SE = totalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
ggplot(totalPops_SE, aes(x = g, y = mean_n, fill = patch)) +
geom_line() +
geom_ribbon(aes(ymax = mean_n + SE, ymin = mean_n - SE), alpha = 0.2) +
labs(title ="Amalgamation Generated Landscape", x = "Generation", y = "Mean Total Population") +
theme_bw()
res_Path <-amalgamation_Paths
res_Path
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
seed
run = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths = append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths = append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
amalgamation_Paths
res_Path <- amalgamation_Paths
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
seed
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths = append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
## Function to read in any TNM output from any seed, giving the path and the data you want as input
read_Output = function(res_Path, res) {
if(res == "/totalPop.txt") {
cols = c("g", "n")
} else if(res == "/totalPopSpec.txt") {
cols = c("g", "s", "n")
} else if(res == "/cellPop.txt") {
cols = c("g", "c", "n")
} else if(res == "/cellPopSpec.txt") {
cols = c("g", "c", "s", "n")
} else if(res == "/cellRich.txt") {
cols = c("g", "c", "n")
}
if(res == "/cellPopSpec.txt") {
f <- function(x, pos) subset(x, g == 9976)
data = read_delim_chunked(file = paste0(res_Path, res), delim = " ", col_names = cols, chunk_size = 10000, callback = DataFrameCallback$new(f),
progress = FALSE)
} else {
data = read.table(file = paste0(res_Path, res), col.names = cols)
}
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
data = data %>% add_column(seed = seed, run = run, patch = patch)
return(data)
}
totalPops = mcmapply(read_Output, amalgamation_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
totalPopSpecs = mcmapply(read_Output, amalgamation_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPops = mcmapply(read_Output, amalgamation_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellRich = mcmapply(read_Output, amalgamation_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPopSpec = mcmapply(read_Output, amalgamation_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
## Function to calculate standard error
SE = function(x) {
sample_Size = length(x)
SD = sd(x)
SE = SD/sqrt(sample_Size)
return(SE)
}
totalPops_SE = totalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
ggplot(totalPops_SE, aes(x = g, y = mean_n, fill = patch)) +
geom_line() +
geom_ribbon(aes(ymax = mean_n + SE, ymin = mean_n - SE), alpha = 0.2) +
labs(title ="Amalgamation Generated Landscape", x = "Generation", y = "Mean Total Population") +
theme_bw()
richness_SE = totalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
ggplot(richness_SE, aes(x = g, y = mean_Rich, fill = patch)) + geom_line() +
geom_ribbon(aes(ymax = mean_Rich + SE, ymin = mean_Rich - SE), alpha = 0.2) +
labs(title ="Amalgamation Generated Landscape", x = "Generation", y = "Mean Species Richness") +
theme_bw()
install.packages("vegan")
totalPops
totalPopSpecs
cellRich
data(varespec)
a <- c(1,5,8,10,22,14,15,16,2,7)
b <- c(10,12,13,2,7,9,2,7,23,15)
df<-data.frame(a,b)
vegdist(df, method = "jaccard")
library(vegan)
vegdist(df, method = "jaccard")
a <- c(1,2,3,4,5)
b <- c(1,2,3,4,5)
df<-data.frame(a,b)
vegdist(df, method = "jaccard")
a <- c(2,2,3,4,5)
b <- c(1,2,3,4,5)
df<-data.frame(a,b)
vegdist(df, method = "jaccard")
library(tidyverse)
library(readr)
library(gtools)
library(viridis)
library(parallel)
#gpath = "/home/ben/Documents/PhD/SLOSS_TNM/Results/Legacy_Outputs/no_Immigration_Radius"
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
random_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RandomLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
random_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RandomLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
random_Paths = append(amalgamation_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
random_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RandomLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
random_Paths = append(random_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
random_Paths
## Function to read in any TNM output from any seed, giving the path and the data you want as input
read_Output = function(res_Path, res) {
if(res == "/totalPop.txt") {
cols = c("g", "n")
} else if(res == "/totalPopSpec.txt") {
cols = c("g", "s", "n")
} else if(res == "/cellPop.txt") {
cols = c("g", "c", "n")
} else if(res == "/cellPopSpec.txt") {
cols = c("g", "c", "s", "n")
} else if(res == "/cellRich.txt") {
cols = c("g", "c", "n")
}
if(res == "/cellPopSpec.txt") {
f <- function(x, pos) subset(x, g == 9976)
data = read_delim_chunked(file = paste0(res_Path, res), delim = " ", col_names = cols, chunk_size = 10000, callback = DataFrameCallback$new(f),
progress = FALSE)
} else {
data = read.table(file = paste0(res_Path, res), col.names = cols)
}
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
data = data %>% add_column(seed = seed, run = run, patch = patch)
return(data)
}
totalPops = mcmapply(read_Output, random_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
totalPopSpecs = mcmapply(read_Output, random_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPops = mcmapply(read_Output, random_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellRich = mcmapply(read_Output, random_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPopSpec = mcmapply(read_Output, random_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
## Function to calculate standard error
SE = function(x) {
sample_Size = length(x)
SD = sd(x)
SE = SD/sqrt(sample_Size)
return(SE)
}
totalPops_SE = totalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
ggplot(totalPops_SE, aes(x = g, y = mean_n, fill = patch)) +
geom_line() +
geom_ribbon(aes(ymax = mean_n + SE, ymin = mean_n - SE), alpha = 0.2) +
labs(title ="Random Generated Landscape", x = "Generation", y = "Mean Total Population") +
theme_bw()
richness_SE = totalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
ggplot(richness_SE, aes(x = g, y = mean_Rich, fill = patch)) + geom_line() +
geom_ribbon(aes(ymax = mean_Rich + SE, ymin = mean_Rich - SE), alpha = 0.2) +
labs(title ="Random Generated Landscape", x = "Generation", y = "Mean Species Richness") +
theme_bw()
#gpath = "/home/ben/Documents/PhD/SLOSS_TNM/Results/Legacy_Outputs/no_Immigration_Radius"
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "landscape_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "landscape_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
raster_Paths
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "landscape_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
raster_Paths
#gpath = "/home/ben/Documents/PhD/SLOSS_TNM/Results/Legacy_Outputs/no_Immigration_Radius"
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "landscape_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
raster_Paths
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RasterLandscape_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
raster_Paths
amalgamation_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "AmalgamationLandscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
amalgamation_Paths
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RasterLandscape") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
raster_Paths
raster_Paths = append(raster_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
raster_Paths
res_Path <- raster_Paths
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
seed
run = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "image_") %>% simplify() %>% nth(2)
patch
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch
#gpath = "/home/ben/Documents/PhD/SLOSS_TNM/Results/Legacy_Outputs/no_Immigration_Radius"
gpath = "/home/frcovell/Project/Results/TNM_Output"
setwd(gpath)
#### Read in paths for results for all seeds and runs
raster_Paths = list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "RasterLandscape") %>% str_subset(pattern = "txt/Results") %>% mixedsort()
raster_Paths = append(raster_Paths, list.dirs(path = gpath, recursive = TRUE) %>% str_subset(pattern = "/Landscape1_") %>% str_subset(pattern = "txt/Results") %>% mixedsort())
## Function to read in any TNM output from any seed, giving the path and the data you want as input
read_Output = function(res_Path, res) {
if(res == "/totalPop.txt") {
cols = c("g", "n")
} else if(res == "/totalPopSpec.txt") {
cols = c("g", "s", "n")
} else if(res == "/cellPop.txt") {
cols = c("g", "c", "n")
} else if(res == "/cellPopSpec.txt") {
cols = c("g", "c", "s", "n")
} else if(res == "/cellRich.txt") {
cols = c("g", "c", "n")
}
if(res == "/cellPopSpec.txt") {
f <- function(x, pos) subset(x, g == 9976)
data = read_delim_chunked(file = paste0(res_Path, res), delim = " ", col_names = cols, chunk_size = 10000, callback = DataFrameCallback$new(f),
progress = FALSE)
} else {
data = read.table(file = paste0(res_Path, res), col.names = cols)
}
seed = str_split(res_Path, pattern = "/")[[1]][9] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
run = str_split(res_Path, pattern = "/")[[1]][7] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
data = data %>% add_column(seed = seed, run = run, patch = patch)
return(data)
}
totalPops = mcmapply(read_Output, raster_Paths, "/totalPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
totalPopSpecs = mcmapply(read_Output, raster_Paths, "/totalPopSpec.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPops = mcmapply(read_Output, raster_Paths, "/cellPop.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellRich = mcmapply(read_Output, raster_Paths, "/cellRich.txt", SIMPLIFY = F, mc.cores = 6) %>% bind_rows()
cellPopSpec = mcmapply(read_Output, raster_Paths, "/cellPopSpec.txt", SIMPLIFY = F, mc.cores = 10) %>% bind_rows()
## Function to calculate standard error
SE = function(x) {
sample_Size = length(x)
SD = sd(x)
SE = SD/sqrt(sample_Size)
return(SE)
}
totalPops_SE = totalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
ggplot(totalPops_SE, aes(x = g, y = mean_n, fill = patch)) +
geom_line() +
geom_ribbon(aes(ymax = mean_n + SE, ymin = mean_n - SE), alpha = 0.2) +
labs(title ="Raster Generated Landscape", x = "Generation", y = "Mean Total Population") +
theme_bw()
richness_SE = totalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
ggplot(richness_SE, aes(x = g, y = mean_Rich, fill = patch)) + geom_line() +
geom_ribbon(aes(ymax = mean_Rich + SE, ymin = mean_Rich - SE), alpha = 0.2) +
labs(title ="Raster Generated Landscape", x = "Generation", y = "Mean Species Richness") +
theme_bw()
patch
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_0.6") %>% simplify() %>% nth(2)
patch
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch = str_split(res_Path, pattern = "/")[[1]][10] %>% str_split(., pattern = "_") %>% simplify() %>% nth(2)
patch
res_Path, pattern = "/")[[1]][10]
res_Path
totalPops
totalPops_SE = totalPops %>% group_by(g, patch) %>% summarise(mean_n = mean(n), SE = SE(n))
totalPops_SE
ggplot(totalPops_SE, aes(x = g, y = mean_n, fill = patch)) +
geom_line() +
geom_ribbon(aes(ymax = mean_n + SE, ymin = mean_n - SE), alpha = 0.2) +
labs(title ="Raster Generated Landscape", x = "Generation", y = "Mean Total Population") +
theme_bw()
richness_SE = totalPopSpecs %>% filter(n > 0) %>% group_by(g, seed, run, patch) %>% summarise(rich = length(n)) %>% ungroup() %>%
group_by(patch, g) %>% summarise(mean_Rich = mean(rich), SE = SE(rich))
View(totalPops_SE)
View(richness_SE)
RasterLandscapeCover <- function(RasterPath = NULL, # Path to Raster to be converted
TifOut = NULL, # Path for .tif output
PID = NULL,# PID of rester file
MatDim = NULL) { # Matrix Dimension
# This function creates landscape cover matrices from a raster of size MatDim
# RasterPath give the path to a tif file to be imported as a Raster
# Output are sent to TifOut and TxtOut
# Example:
# input: RasterLandscapeCover(RasterPath = "../../Data/hansen_image_PID0006.tif", TifOut = "../../Data/result06.tif",
# PID = PID0006", MatDim = c(11,11))
# output: result06.tif, landscape_hansen_image_PID0006.txt
# in terminal pasts "Percentage Cover equals:29.7520661157025"
#load libraries
require(raster)
require(rgdal)
#import raster
init_land <- raster(paste0(RasterPath))
#scale down 1 cell = 120 m
#each cell ~30m by merging 4 cell each cell~120m
mergecol<-ceiling(dim(init_land)[2]/4)
mergerow<-ceiling(dim(init_land)[2]/4)
merg_land <- aggregate(init_land, fact=c(ceiling(dim(init_land)[2]/mergecol), ceiling(dim(init_land)[1]/mergerow)))
#scale down to 11 by 11
scale_land <- aggregate( merg_land, fact=c(ceiling(dim( merg_land)[2]/11), ceiling(dim( merg_land)[1]/11)))
res(scale_land)
dim(scale_land)
#convert to matix
Land_Mat<- as.matrix(scale_land)
#fill with 100 and 0 and work out  percentage cover
Land_Mat <- ifelse(Land_Mat  > 69 , 100, Land_Mat )
Land_Mat <- ifelse(Land_Mat  < 100 , 0, Land_Mat )
PerCov <- sum(Land_Mat)/length(Land_Mat)
#output matric as new tif
height <- MatDim[1]
width <-MatDim[2]
tif_driver <- new("GDALDriver", "GTiff")
tif <- new("GDALTransientDataset", tif_driver, height, width, 1, 'Byte')
bnd1 <- putRasterData(tif, Land_Mat)
tif_file <-TifOut
saveDataset(tif, tif_file)
GDAL.close(tif)
GDAL.close(tif_driver)
#output matix as txt
Land_txt <- ifelse(Land_Mat  == 100 , 1, Land_Mat )
#filename <-paste0(TxtOut)
filename <-paste0("../../Data/Fragments/RasterLandscape",PID,"_", round(PerCov)/100,".txt")
write.table(Land_txt, file=filename, row.names=FALSE, col.names=FALSE)
#paste0("Percentage Cover equals:", PerCov)
}
RasterLandscapeCover(RasterPath = "../../Data/hansen_image_PID0054.tif", TifOut = "../../Data/result54.tif", PID = PID0054", MatDim = c(11,11))
)
}
