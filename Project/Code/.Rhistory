source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
MatDim <- c(11,11)
PerCov = c(0.25, 0.5, 0.75)
#height <- MatDim[1]
#width <- MatDim[2]
for (i in 1:length(PerCov)) {
mines <- round(MatDim[1] * PerCov[1])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (i in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[i] - 1):(mine.row[i] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[i] - 1):(mine.col[i] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
sum(mine.mat)/(MatDim[1]*MatDim[2])
print("You Exploded")
}
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
length(PerCov)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0, 0.25, 0.5, 0.75, 1)
for (j in 1:length(PerCov)) {
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
for (j in 1:length(PerCov)) {
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (i in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[i] - 1):(mine.row[i] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[i] - 1):(mine.col[i] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0, 0.25, 0.5, 0.75, 1)
for (j in 1:length(PerCov)) {
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (i in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[i] - 1):(mine.row[i] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[i] - 1):(mine.col[i] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
rm(list=ls())
MatDim <- c(11,11)
PerCov = c(0.25, 0.5, 0.75)
#height <- MatDim[1]
#width <- MatDim[2]
for (i in 1:length(PerCov)) {
mines <- round(MatDim[1] * PerCov[i])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (i in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[i] - 1):(mine.row[i] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[i] - 1):(mine.col[i] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0, 0.25, 0.5, 0.75, 1)
for (i in 1: NumRun) {
for (i in 1:length(PerCov)) {
mines <- round(MatDim[1] * PerCov[i])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (i in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[i] - 1):(mine.row[i] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[i] - 1):(mine.col[i] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
}
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0, 0.25, 0.5, 0.75, 1)
1: NumRun
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0, 0.25, 0.5, 0.75, 1)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
}
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0, 0.25, 0.5, 0.75, 1)
for (j in 1:length(PerCov)) {
set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
k=1
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mine.row
j=1
#set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mines
PerCov
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
}
j=2
#set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mines
j=3
#set.seed(i)
mines <- round(MatDim[1] * PerCov[j])
mines
#set.seed(i)
mines <- round(2(MatDim[1]) * PerCov[j])
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mines
j=2
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mines
j=1
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mines
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
print("You Exploded")
}
}
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
filename <-paste0("../Data/Fragments/Amalandscape",i,"_", PerCov[j],".txt")
write.table(h, file=filename, row.names=FALSE, col.names=FALSE)
}
print("You Exploded")
}
setwd("Project/Code/TNM_Code/")
rm(list=ls())
MatDim <- c(11,11)
PerCov = c(0.25, 0.5, 0.75)
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
filename <-paste0("../Data/Fragments/Amalandscape",i,"_", PerCov[j],".txt")
write.table(mine.mat, file=filename, row.names=FALSE, col.names=FALSE)
}
print("You Exploded")
}
i=1
j=1
k=1
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
filename <-paste0("../Data/Fragments/Amalandscape",i,"_", PerCov[j],".txt")
write.table(mine.mat, file=filename, row.names=FALSE, col.names=FALSE)
}
print("You Exploded")
}
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
mine.col
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
mine.mat
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
mine.mat
#### ####
rm(list=ls())
i=1
j=i
k=1
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
mine.mat
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
mine.mat
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
mine.mat
filename <-paste0("../Data/Fragments/Amalandscape",i,"_", PerCov[j],".txt")
filename
mine.mat
write.table(mine.mat, file=filename, row.names=FALSE, col.names=FALSE)
lanscape <-matrix(data = sample(c(1,0), replace=TRUE, size= MatDim[1] * MatDim[2] , prob = c(PerCov[j], (1-PerCov[j]))) ,  MatDim[1], ncol = MatDim[2])
lanscape
filename <-paste0("../Data/Fragments/landscape",i,"_", PerCov[j],".txt")
write.table(lanscape, file=filename, row.names=FALSE, col.names=FALSE)
lanscape <-matrix(data = sample(c(1,0), replace=TRUE, size= MatDim[1] * MatDim[2] , prob = c(PerCov[j], (1-PerCov[j]))) ,  MatDim[1], ncol = MatDim[2])
filename <-paste0("../Data/Fragments/landscape",i,"_", PerCov[j],".txt")
write.table(lanscape, file=filename, row.names=FALSE, col.names=FALSE)
getwd()
setwd("../")
getwd()
#### ####
rm(list=ls())
MatDim <- c(11,11)
NumRun = 5
PerCov = c(0.25, 0.5, 0.75)
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
#set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
filename <-paste0("../Data/Fragments/Amalandscape",i,"_", PerCov[j],".txt")
write.table(mine.mat, file=filename, row.names=FALSE, col.names=FALSE)
}
print("You Exploded")
}
#### ####
rm(list=ls())
#### Amalgamation landscape cover ####
AmalgamationLandscapeCover <-function(MatDim = NULL, # Matrix dimensions
NumRun= NULL, # Number of runs, this is used to set seed for sampling
PerCov=NULL ){ # Percentage landscape covers
for (i in 1: NumRun) {
for (j in 1:length(PerCov)) {
set.seed(i)
mines <- round((2*MatDim[1]) * PerCov[j])
mine.index <- sample(MatDim[1] * MatDim[2], mines)
mine.mat <- matrix(0, MatDim[1], MatDim[2])
mine.mat[mine.index] <- -10
search.mine <- which(mine.mat < 0, arr.ind = TRUE)
mine.row <- search.mine[, 1]
mine.col <- search.mine[, 2]
for (k in 1:mines) {
mrow <- intersect(1:MatDim[1], (mine.row[k] - 1):(mine.row[k] + 1))
mcol <- intersect(1:MatDim[2], (mine.col[k] - 1):(mine.col[k] + 1))
mine.mat[mrow, mcol] <- mine.mat[mrow, mcol] + 1
}
mine.mat <- ifelse(mine.mat < 0 , 1, mine.mat)
mine.mat <- ifelse(mine.mat > 1 , 1, mine.mat)
print(sum(mine.mat)/(MatDim[1]*MatDim[2]))
filename <-paste0("../Data/Fragments/MineSweeplandscape",i,"_", PerCov[j],".txt")
write.table(mine.mat, file=filename, row.names=FALSE, col.names=FALSE)
}
}
print("You Exploded")
}
AmalgamationLandscapeCover(c(11,11), 5, c(0.25, 0.5, 0.75))
